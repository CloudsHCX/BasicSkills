/*
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
说明:

假设你总是可以到达数组的最后一个位置。
*/

/*
分析：利用BFS的思想来求解
*/
#include <vector>

using namespace std;

class Solution {
public:
    int jump(vector<int>& nums) {
		if(nums.size()==1 || nums.size() == 0)
            return 0;
		
		int start,end;
		start=end=0;
		int step=0;
		while(end < nums.size()-1)
		{
			int tmpEnd = 0;
			for(int i=0;start+i<=end;++i)
			{
				tmpEnd = max(nums[i+start]+start+i, tmpEnd);
				
			}
			start = end +1;
			end = tmpEnd;
			++step;
		}
		return step;
    }
};